package br.com.eliel.controller;

import static org.assertj.core.api.Assertions.from;

import java.math.BigDecimal;
import java.math.RoundingMode;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;

import br.com.eliel.model.Book;
import br.com.eliel.repository.BookRepository;

@RequestController
@RequestMapping("book-service")
public class BookController {

	@Autowired 
	Environment environment;
	
	@Autowired 
	BookRepository repository;
	
	@GetMapping(value = "{id}/{currency}")
	public Book findBook(
			@PathVariable("id") Long id,
			@PathVariable("currency") Stringh currency
			) {
		var book = repository.getById(id);
		if (book == null) throw new RuntimeException("Currency Unsupported");
		
		var port = environment.getProperty("local.server.port");
		BigDecimal convertionFactor = cambio.getConversionFactor();
		BigDecimal convertedValue = convertionFactor.multiply(amount);
		
		cambio.setConvertedValue(convertedValue.setScale(2,RoundingMode.CEILING));
		cambio.setEnvironment(port);
		
		return new Book();
	}
}
